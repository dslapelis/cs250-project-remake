   1 0000               #
   2 0000               # FILE:		$File$
   3 0000               # AUTHOR:	Daniel Slapelis
   4 0000               # CONTRIBUTORS:
   5 0000               #		Me, Myself, and I-
   6 0000               #
   7 0000               # DESCRIPTION:
   8 0000               #	This program is an implementation of dijkstra's algorithm in
   9 0000               #	MIPS assembly.
  10 0000               #
  11 0000               # ARGUMENTS:
  12 0000               #	None
  13 0000               #
  14 0000               # INPUT:
  15 0000               #	Takes in a list of directed nodes from STDIN.
  16 0000               #	See https://www.cs.rit.edu/~csci250/project/171/proj171.html
  17 0000               #	for details on the input.
  18 0000               #
  19 0000               # OUTPUT:
  20 0000               #	A matrix of the dijkstra's algorithm path, as well as a chart showing
  21 0000               #	the path for each node.
  22 0000               #
  23 0000               # REVISION HISTORY:
  24 0000               #	November 2017	- Initial implementation
  25 0000               #
  26 0000               
  27 0000               #----------------------------
  28 0000               
  29 0000               #
  30 0000               # NUMERIC CONSTANTS
  31 0000               #
  32 0000               
  33 0000               PRINT_STRING = 4
  34 0000               READ_INT = 5
  35 0000               PRINT_INT = 1
  36 0000               INFINITY = 2147483646
  37 0000               
  38 0000               #
  39 0000               # DATA AREAS
  40 0000               #
  41 0000               
  42 0000               	.data 
  43 0000               	.align	2		# word data must be on word boundries
  44 0000               
  45 0000               #
  46 0000               # DATA ARRAYS
  47 0000               #
  48 0000               
  49 0000               edges:
  50 0000 00000000		.space	4800	# for edges
          00000000
          00000000
          00000000
          00000000
          00000000
  51 12c0               grid:
  52 12c0 00000000		.space	4800	# for 400 (20x20) positions of data
          00000000
          00000000
          00000000
          00000000
          00000000
  53 2580               dist:
  54 2580 00000000		.space	100	# for 20 distances
          00000000
          00000000
          00000000
          00000000
          00000000
  55 25e4               sptSet:
  56 25e4 00000000		.space	100	# for 20 true/false (1/0)
          00000000
          00000000
          00000000
          00000000
          00000000
  57 2648               path:
  58 2648 00000000		.space	100	# path for dijkstra's
          00000000
          00000000
          00000000
          00000000
          00000000
  59 26ac               nmsrc:
  60 26ac 00000000		.space	80	# for n, m, and src
          00000000
          00000000
          00000000
          00000000
          00000000
  61 26fc               
  62 26fc               #
  63 26fc               # BOARD STRINGS
  64 26fc               #
  65 26fc               
  66 26fc               board_dash:
  67 26fc 2D00    		.asciiz "-"
  68 26fe               board_space_1:
  69 26fe 2000    		.asciiz " "
  70 2700               board_space_2:
  71 2700 202000  		.asciiz "  "
  72 2703               board_space_3:
  73 2703 20202000		.asciiz "   "
  74 2707               board_space_4:
  75 2707 20202020		.asciiz "    "
          00      
  76 270c               board_space_6:
  77 270c 20202020		.asciiz "      "
          202000  
  78 2713               board_space_7:
  79 2713 20202020		.asciiz "       "
          20202000
  80 271b               board_dijkstra_top:
  81 271b 4E6F6465		.asciiz "Node    Path : Distance\n"
          20202020
          50617468
          203A2044
          69737461
          6E63650A
  82 2734               
  83 2734               
  84 2734               #
  85 2734               # ERROR STRINGS
  86 2734               #
  87 2734               
  88 2734               error1:
  89 2734 496E7661		.asciiz	"Invalid number of nodes. Must be between 1 and 20.\n"
          6C696420
          6E756D62
          6572206F
          66206E6F
          6465732E
  90 2768               error2:
  91 2768 496E7661		.asciiz "Invalid number of edges. Must be between 0 and 400.\n"
          6C696420
          6E756D62
          6572206F
          66206564
          6765732E
  92 279d               error3: 
  93 279d 496E7661		.asciiz	"Invalid source for edge.\n"
          6C696420
          736F7572
          63652066
          6F722065
          6467652E
  94 27b7               error4:
  95 27b7 496E7661		.asciiz	"Invalid destination for edge.\n"
          6C696420
          64657374
          696E6174
          696F6E20
          666F7220
  96 27d6               error5:
  97 27d6 496E7661		.asciiz	"Invalid weight for edge.\n"
          6C696420
          77656967
          68742066
          6F722065
          6467652E
  98 27f0               error6:
  99 27f0 496E7661		.asciiz	"Invalid starting node.\n"
          6C696420
          73746172
          74696E67
          206E6F64
          652E0A00
 100 2808               
 101 2808               #
 102 2808               # MISC. STRINGS
 103 2808               #
 104 2808               prompt1:
 105 2808 596F7572		.asciiz "Your input is..."
          20696E70
          75742069
          732E2E2E
          00      
 106 2819               newline:
 107 2819 0A00    		.asciiz "\n"
 108 281b               comma:
 109 281b 2C2000  		.asciiz ", "
 110 281e               colon:
 111 281e 3A00    		.asciiz ":"
 112 2820               unreachable:
 113 2820 756E7265		.asciiz "unreachable\n"
          61636861
          626C650A
          00      
 114 282d               #
 115 282d               # CODE AREAS
 116 282d               #
 117 282d               
 118 0000               	.text
 119 0000               	.align	2
 120 0000               #
 121 0000               # EXECUTION BEGINS HERE
 122 0000               #
 123 0000               main:
 124 0000 0C000013		jal	read_nodes
 125 0004 3C130000		la	$s3, nmsrc		# array containing n, m, and src
     0008 36730000
 126 000c 8E710000		lw	$s1, 0($s3)		# n
 127 0010 8E720004		lw	$s2, 4($s3)		# m
 128 0014 8E730008		lw	$s3, 8($s3)		# src
 129 0018               
 130 0018 02202021		move	$a0, $s1
 131 001c 02402821		move	$a1, $s2
 132 0020 0C000060		jal	setup_grid		# adds data to grid array
 133 0024               	
 134 0024 02202021		move	$a0, $s1
 135 0028 0C000093		jal	print_grid		# prints grid array data
 136 002c               	
 137 002c 02202021		move	$a0, $s1
 138 0030 02602821		move	$a1, $s3
 139 0034 0C000129		jal	dijkstra		# performs dijkstra's alg functions
 140 0038               	
 141 0038 02202021		move	$a0, $s1
 142 003c 02602821		move	$a1, $s3
 143 0040 0C0001AC		jal	print_nodes
 144 0044               
 145 0044 3402000A		li	$v0, 10
 146 0048 0000000C		syscall
 147 004c               
 148 004c               #
 149 004c               # Name:         read_nodes
 150 004c               # Description:  reads integers from STDIN, and populates the edges array with
 151 004c               #			node edge data. also populates nmsrc with n, m, and src
 152 004c               # Arguments:    none
 153 004c               # Returns:      none
 154 004c               # Destroys:     none
 155 004c               #
 156 004c               read_nodes:
 157 004c 23BDFFDC		addi	$sp, $sp, -36	# $sp = $sp + 36
 158 0050 AFBF0000		sw	$ra, 0($sp)
 159 0054 AFB00004		sw	$s0, 4($sp)
 160 0058 AFB10008		sw	$s1, 8($sp)
 161 005c AFB2000C		sw	$s2, 12($sp)
 162 0060 AFB30010		sw	$s3, 16($sp)
 163 0064 AFB40014		sw	$s4, 20($sp)
 164 0068 AFB50018		sw	$s5, 24($sp)
 165 006c AFB6001C		sw	$s6, 28($sp)
 166 0070 AFB70020		sw	$s7, 32($sp)
 167 0074               
 168 0074 3C100000		la	$s0, edges		# edges array pointer		 
     0078 36100000
 169 007c               	
 170 007c 34020005		li	$v0, READ_INT
 171 0080 0000000C		syscall
 172 0084               	
 173 0084 20080014		addi	$t0, $zero, 20
 174 0088 0102082A		bgt	$v0, $t0, num_node_err
     008c 1420025A
 175 0090 0002082A		ble	$v0, $zero, num_node_err
     0094 10200258
 176 0098               
 177 0098 0040B821		move 	$s7, $v0		# total number of nodes
 178 009c               
 179 009c 34020005		li	$v0, READ_INT
 180 00a0 0000000C		syscall
 181 00a4               	
 182 00a4 21080190		addi	$t0, 400
 183 00a8 0102082A		bgt	$v0, $t0, num_edge_err
     00ac 14200258
 184 00b0 0002082A		ble	$v0, $zero, num_edge_err
     00b4 10200256
 185 00b8               
 186 00b8 0040B021		move	$s6, $v0		# total number of edges
 187 00bc 00004020		add	$t0, $zero, $zero
 188 00c0               read_data:
 189 00c0 11160019		beq	$t0, $s6, done_read_data	
 190 00c4               	
 191 00c4 34020005		li	$v0, READ_INT		# read in integer from STDIN
 192 00c8 0000000C		syscall
 193 00cc               
 194 00cc 0057082A		bge	$v0, $s7, invl_src_err
     00d0 10200255
 195 00d4 0040082A		blt	$v0, $zero, invl_src_err
     00d8 14200253
 196 00dc               	
 197 00dc AE020000		sw	$v0, 0($s0)		# store int in array
 198 00e0               
 199 00e0 34020005		li	$v0, READ_INT
 200 00e4 0000000C		syscall
 201 00e8               
 202 00e8 0057082A		bge	$v0, $s7, invl_dst_err
     00ec 10200254
 203 00f0 0040082A		blt	$v0, $zero, invl_dst_err
     00f4 14200252
 204 00f8               
 205 00f8 AE020004		sw	$v0, 4($s0)
 206 00fc               
 207 00fc 34020005		li	$v0, READ_INT
 208 0100 0000000C		syscall
 209 0104               
 210 0104 200903E8		addi	$t1, $zero, 1000
 211 0108 0122082A		bgt	$v0, $t1, invl_weight_err
     010c 14200252
 212 0110 0002082A		ble	$v0, $zero, invl_weight_err
     0114 10200250
 213 0118               
 214 0118 AE020008		sw	$v0, 8($s0)
 215 011c               
 216 011c 2210000C		addi	$s0, $s0, 12
 217 0120 21080001		addi	$t0, $t0, 1
 218 0124               
 219 0124 08000030		j	read_data		# jump to read_data
 220 0128               done_read_data:
 221 0128 3C140000		la	$s4, nmsrc
     012c 36940000
 222 0130               	
 223 0130 AE970000		sw	$s7, 0($s4)
 224 0134 AE960004		sw	$s6, 4($s4)
 225 0138               
 226 0138 34020005		li	$v0, READ_INT
 227 013c 0000000C		syscall
 228 0140               	
 229 0140 0057082A		bge	$v0, $s7, invl_strt_err
     0144 1020024A
 230 0148 0040082A		blt	$v0, $zero, invl_strt_err
     014c 14200248
 231 0150               
 232 0150 AE820008		sw	$v0, 8($s4)
 233 0154               
 234 0154 8FB70020		lw	$s7, 32($sp)
 235 0158 8FB6001C		lw	$s6, 28($sp)
 236 015c 8FB50018		lw	$s5, 24($sp)
 237 0160 8FB40014		lw	$s4, 20($sp)
 238 0164 8FB30010		lw	$s3, 16($sp)
 239 0168 8FB2000C		lw	$s2, 12($sp)
 240 016c 8FB10008		lw	$s1, 8($sp)
 241 0170 8FB00004		lw	$s0, 4($sp)
 242 0174 8FBF0000		lw	$ra, 0($sp)
 243 0178 23BD0024		addi	$sp, $sp, 36
 244 017c 03E00008		jr	$ra					# jump to $ra
 245 0180               	
 246 0180               
 247 0180               #
 248 0180               # Name:         setup_grid
 249 0180               # Description:  sets up grid as 1D array with node data
 250 0180               # Arguments:    a0:     total number of nodes, n
 251 0180               #               a1:     total number of edges, m
 252 0180               # Returns:      none
 253 0180               # Destroys:     a lot of t registers
 254 0180               #
 255 0180               setup_grid:
 256 0180 AFBF0000	        sw      $ra, 0($sp)
 257 0184 AFB00004	        sw      $s0, 4($sp)
 258 0188 AFB10008	        sw      $s1, 8($sp)
 259 018c AFB2000C	        sw      $s2, 12($sp)
 260 0190 AFB30010	        sw      $s3, 16($sp)
 261 0194 AFB40014	        sw      $s4, 20($sp)
 262 0198 AFB50018	        sw      $s5, 24($sp)
 263 019c AFB6001C	        sw      $s6, 28($sp)
 264 01a0 AFB70020	        sw      $s7, 32($sp)
 265 01a4                
 266 01a4 00808021		move	$s0, $a0		# number of nodes, n
 267 01a8 3C120000		la	$s2, grid
     01ac 36520000
 268 01b0               
 269 01b0 21EF0063		addi	$t7, $t7, 99
 270 01b4 AE4F0000		sw	$t7, 0($s2)
 271 01b8               
 272 01b8 00004820		add	$t1, $zero, $zero
 273 01bc               setup_grid_loop_y:
 274 01bc 11300018		beq	$t1, $s0, setup_grid_loop_y_done
 275 01c0 00005020		add	$t2, $zero, $zero
 276 01c4               setup_grid_loop_x:
 277 01c4 11500014		beq	$t2, $s0, setup_grid_loop_x_done
 278 01c8               	
 279 01c8 00005820		add	$t3, $zero, $zero
 280 01cc 3C110000		la	$s1, edges		# load edges array
     01d0 36310000
 281 01d4               search_edges:
 282 01d4 1165000C		beq	$t3, $a1, search_done
 283 01d8               
 284 01d8 8E2C0000		lw	$t4, 0($s1)		# check y
 285 01dc 152C0007		bne	$t1, $t4, edge_ne
 286 01e0               
 287 01e0 8E2C0004		lw	$t4, 4($s1)		# check x
 288 01e4 154C0005		bne	$t2, $t4, edge_ne
 289 01e8               
 290 01e8 8E2C0008		lw	$t4, 8($s1)		# store weight
 291 01ec AE4C0000		sw	$t4, 0($s2)
 292 01f0               
 293 01f0 22520004		addi	$s2, $s2, 4
 294 01f4 214A0001		addi	$t2, $t2, 1
 295 01f8 08000071		j	setup_grid_loop_x
 296 01fc               edge_ne:
 297 01fc 2231000C		addi	$s1, $s1, 12
 298 0200 216B0001		addi	$t3, $t3, 1
 299 0204 08000075		j	search_edges
 300 0208               search_done:
 301 0208 AE400000		sw	$zero, 0($s2)
 302 020c 22520004		addi	$s2, $s2, 4
 303 0210 214A0001		addi	$t2, $t2, 1
 304 0214 08000071		j	setup_grid_loop_x
 305 0218               
 306 0218               setup_grid_loop_x_done:
 307 0218 21290001		addi	$t1, $t1, 1		# increment y counter
 308 021c 0800006F		j	setup_grid_loop_y
 309 0220               
 310 0220               setup_grid_loop_y_done:
 311 0220 8FB70020	        lw      $s7, 32($sp)
 312 0224 8FB6001C	        lw      $s6, 28($sp)
 313 0228 8FB50018	        lw      $s5, 24($sp)
 314 022c 8FB40014	        lw      $s4, 20($sp)
 315 0230 8FB30010	        lw      $s3, 16($sp)
 316 0234 8FB2000C	        lw      $s2, 12($sp)
 317 0238 8FB10008	        lw      $s1, 8($sp)
 318 023c 8FB00004	        lw      $s0, 4($sp)
 319 0240 8FBF0000	        lw      $ra, 0($sp)
 320 0244 23BD0024	        addi    $sp, $sp, 36
 321 0248 03E00008	        jr      $ra	# jump to $ra
 322 024c               
 323 024c               #
 324 024c               # Name:         print_grid
 325 024c               # Description:  prints the matrix of nodes in grid array
 326 024c               # Arguments:    a0:     total number of nodes, n
 327 024c               # Returns:      none
 328 024c               # Destroys:     a lot of t registers
 329 024c               #
 330 024c               print_grid:
 331 024c 23BDFFDC		addi    $sp, $sp, -36   # $sp = $sp + 36
 332 0250 AFBF0000	        sw      $ra, 0($sp)
 333 0254 AFB00004	        sw      $s0, 4($sp)
 334 0258 AFB10008	        sw      $s1, 8($sp)
 335 025c AFB2000C	        sw      $s2, 12($sp)
 336 0260 AFB30010	        sw      $s3, 16($sp)
 337 0264 AFB40014	        sw      $s4, 20($sp)
 338 0268 AFB50018	        sw      $s5, 24($sp)
 339 026c AFB6001C	        sw      $s6, 28($sp)
 340 0270 AFB70020	        sw      $s7, 32($sp)
 341 0274               	
 342 0274 00808021		move	$s0, $a0			# move x/y length
 343 0278 00809021		move	$s2, $a0			# store the x/y length
 344 027c               
 345 027c 3C130000		la	$s3, grid
     0280 36730000
 346 0284               
 347 0284 34020004		li	$v0, PRINT_STRING
 348 0288 3C040000		la	$a0, newline
     028c 34840000
 349 0290 0000000C		syscall
 350 0294               
 351 0294 02002021		move	$a0, $s0
 352 0298 0C0000F6		jal	print_top_row
 353 029c               
 354 029c 00004020		add	$t0, $zero, $zero
 355 02a0               print_grid_data:
 356 02a0 11120042		beq	$t0, $s2, print_grid_data_done
 357 02a4               
 358 02a4 34020004		li	$v0, PRINT_STRING
 359 02a8 3C040000		la	$a0, board_space_1
     02ac 34840000
 360 02b0 0000000C		syscall
 361 02b4               
 362 02b4 2909000A		slti	$t1, $t0, 10
 363 02b8 11200008		beq	$t1, $zero, y_gt_ten
 364 02bc               
 365 02bc 34020004		li	$v0, PRINT_STRING		# print another space and then
 366 02c0 3C040000		la	$a0, board_space_1		# print our integer
     02c4 34840000
 367 02c8 0000000C		syscall
 368 02cc               
 369 02cc 34020001		li	$v0, PRINT_INT
 370 02d0 01002021		move	$a0, $t0
 371 02d4 0000000C		syscall
 372 02d8               
 373 02d8 080000BA		j	grid_data_cont
 374 02dc               y_gt_ten:
 375 02dc 34020001		li	$v0, PRINT_INT
 376 02e0 01002021		move	$a0, $t0
 377 02e4 0000000C		syscall
 378 02e8               grid_data_cont:
 379 02e8 00004820		add	$t1, $zero, $zero
 380 02ec               print_grid_data_loop:				# prints row of nodes
 381 02ec 11320029		beq	$t1, $s2, print_grid_data_loop_done	        
 382 02f0 8E6A0000		lw	$t2, 0($s3)
 383 02f4 294B000A		slti	$t3, $t2, 10
 384 02f8 1560000C		bne	$t3, $zero, data_lt_ten
 385 02fc 294B0064		slti	$t3, $t2, 100
 386 0300 1560001A		bne	$t3, $zero, data_lt_hund
 387 0304               						# if we are here, data is
 388 0304               						# 100 < x < 1000
 389 0304               
 390 0304 34020004		li	$v0, PRINT_STRING		# we will only print 1 space
 391 0308               						# before our data here
 392 0308 3C040000		la	$a0, board_space_1
     030c 34840000
 393 0310 0000000C		syscall
 394 0314               
 395 0314 34020001		li	$v0, PRINT_INT
 396 0318 01402021		move	$a0, $t2
 397 031c 0000000C		syscall
 398 0320               	
 399 0320 22730004		addi	$s3, $s3, 4
 400 0324 21290001		addi	$t1, $t1, 1
 401 0328 080000BB		j	print_grid_data_loop
 402 032c               data_lt_ten:					# 3 spaces before data if
 403 032c               						# it is < 10
 404 032c 34020004		li	$v0, PRINT_STRING
 405 0330 3C040000		la	$a0, board_space_3
     0334 34840000
 406 0338 0000000C		syscall
 407 033c               	
 408 033c 11400004		beq	$t2, $zero, data_is_zero
 409 0340               
 410 0340 34020001		li	$v0, PRINT_INT
 411 0344 01402021		move	$a0, $t2
 412 0348 0000000C		syscall
 413 034c 080000D8		j	data_isnt_zero
 414 0350               data_is_zero:					# all zeros in grid ar printed
 415 0350               						# as a dash
 416 0350 34020004		li	$v0, PRINT_STRING
 417 0354 3C040000		la	$a0, board_dash
     0358 34840000
 418 035c 0000000C		syscall
 419 0360               data_isnt_zero:					# increment and repeat
 420 0360 22730004		addi	$s3, $s3, 4
 421 0364 21290001		addi	$t1, $t1, 1
 422 0368 080000BB		j	print_grid_data_loop
 423 036c               data_lt_hund:					# if node weight is 10 < x < 100
 424 036c 34020004		li	$v0, PRINT_STRING		# print 2 spaces before it
 425 0370 3C040000		la	$a0, board_space_2
     0374 34840000
 426 0378 0000000C		syscall
 427 037c               
 428 037c 34020001		li	$v0, PRINT_INT
 429 0380 01402021		move	$a0, $t2
 430 0384 0000000C		syscall
 431 0388               
 432 0388 22730004		addi	$s3, $s3, 4
 433 038c 21290001		addi	$t1, $t1, 1
 434 0390 080000BB		j	print_grid_data_loop
 435 0394               print_grid_data_loop_done:
 436 0394 34020004		li	$v0, PRINT_STRING
 437 0398 3C040000		la	$a0, newline
     039c 34840000
 438 03a0 0000000C		syscall
 439 03a4               
 440 03a4 21080001		addi	$t0, $t0, 1		# increment
 441 03a8 080000A8		j	print_grid_data
 442 03ac               print_grid_data_done:
 443 03ac 8FB70020		lw      $s7, 32($sp)
 444 03b0 8FB6001C	        lw      $s6, 28($sp)
 445 03b4 8FB50018	        lw      $s5, 24($sp)
 446 03b8 8FB40014	        lw      $s4, 20($sp)
 447 03bc 8FB30010	        lw      $s3, 16($sp)
 448 03c0 8FB2000C	        lw      $s2, 12($sp)
 449 03c4 8FB10008	        lw      $s1, 8($sp)
 450 03c8 8FB00004	        lw      $s0, 4($sp)
 451 03cc 8FBF0000	        lw      $ra, 0($sp)
 452 03d0 23BD0024	        addi    $sp, $sp, 36
 453 03d4 03E00008	        jr      $ra                     # jump to $ra
 454 03d8               
 455 03d8               #
 456 03d8               # Name:         print_top_row
 457 03d8               # Description:  prints top row of nodes matrix
 458 03d8               # Arguments:    a0:     number of nodes, n
 459 03d8               # Returns:      none
 460 03d8               # Destroys:     none
 461 03d8               #
 462 03d8               print_top_row:
 463 03d8 23BDFFDC		addi    $sp, $sp, -36   # $sp = $sp + 36
 464 03dc AFBF0000	        sw      $ra, 0($sp)
 465 03e0 AFB00004	        sw      $s0, 4($sp)
 466 03e4 AFB10008	        sw      $s1, 8($sp)
 467 03e8 AFB2000C	        sw      $s2, 12($sp)
 468 03ec AFB30010	        sw      $s3, 16($sp)
 469 03f0 AFB40014	        sw      $s4, 20($sp)
 470 03f4 AFB50018	        sw      $s5, 24($sp)
 471 03f8 AFB6001C	        sw      $s6, 28($sp)
 472 03fc AFB70020	        sw      $s7, 32($sp)
 473 0400               
 474 0400 00808021		move	$s0, $a0
 475 0404               	
 476 0404 34020004		li	$v0, PRINT_STRING
 477 0408 3C040000		la	$a0, board_space_3
     040c 34840000
 478 0410 0000000C		syscall
 479 0414               
 480 0414 00004020		add	$t0, $zero, $zero
 481 0418               print_top_columns:
 482 0418 11100013		beq	$t0, $s0, print_top_columns_done
 483 041c               
 484 041c 2909000A		slti	$t1, $t0, 10
 485 0420 11200008		beq	$t1, $zero, gt_ten
 486 0424               
 487 0424 34020004		li	$v0, PRINT_STRING
 488 0428 3C040000		la	$a0, board_space_3
     042c 34840000
 489 0430 0000000C		syscall
 490 0434               
 491 0434 34020001		li	$v0, PRINT_INT		# print column integer
 492 0438 01002021		move	$a0, $t0
 493 043c 0000000C		syscall
 494 0440 08000118		j	print_top_col_cont
 495 0444               gt_ten:
 496 0444 34020004		li	$v0, PRINT_STRING
 497 0448 3C040000		la	$a0, board_space_2
     044c 34840000
 498 0450 0000000C		syscall
 499 0454               	
 500 0454 34020001		li	$v0, PRINT_INT
 501 0458 01002021		move	$a0, $t0
 502 045c 0000000C		syscall
 503 0460               print_top_col_cont:
 504 0460 21080001		addi	$t0, $t0, 1
 505 0464 08000106		j	print_top_columns
 506 0468               print_top_columns_done:
 507 0468 34020004		li	$v0, PRINT_STRING
 508 046c 3C040000		la	$a0, newline
     0470 34840000
 509 0474 0000000C		syscall
 510 0478                       
 511 0478 8FB70020		lw      $s7, 32($sp)
 512 047c 8FB6001C	        lw      $s6, 28($sp)
 513 0480 8FB50018	        lw      $s5, 24($sp)
 514 0484 8FB40014	        lw      $s4, 20($sp)
 515 0488 8FB30010	        lw      $s3, 16($sp)
 516 048c 8FB2000C	        lw      $s2, 12($sp)
 517 0490 8FB10008	        lw      $s1, 8($sp)
 518 0494 8FB00004	        lw      $s0, 4($sp)
 519 0498 8FBF0000	        lw      $ra, 0($sp)
 520 049c 23BD0024	        addi    $sp, $sp, 36
 521 04a0 03E00008		jr	$ra
 522 04a4               
 523 04a4               #
 524 04a4               # Name:         dijkstra
 525 04a4               # Description:  main function which calls all the functions that complete
 526 04a4               #			dijkstra's algorithm
 527 04a4               # Arguments:    a0:     total number of nodes, n
 528 04a4               #               a1:     source node S
 529 04a4               # Returns:      none
 530 04a4               # Destroys:     $t0 - $t7
 531 04a4               #
 532 04a4               dijkstra:
 533 04a4 23BDFFDC	        addi    $sp, $sp, -36   # $sp = $sp + 36
 534 04a8 AFBF0000	        sw      $ra, 0($sp)
 535 04ac AFB00004	        sw      $s0, 4($sp)
 536 04b0 AFB10008	        sw      $s1, 8($sp)
 537 04b4 AFB2000C	        sw      $s2, 12($sp)
 538 04b8 AFB30010	        sw      $s3, 16($sp)
 539 04bc AFB40014	        sw      $s4, 20($sp)
 540 04c0 AFB50018	        sw      $s5, 24($sp)
 541 04c4 AFB6001C	        sw      $s6, 28($sp)
 542 04c8 AFB70020	        sw      $s7, 32($sp)
 543 04cc               
 544 04cc 00808021		move	$s0, $a0		# number of node n, V
 545 04d0 00A08821		move	$s1, $a1		# source node S
 546 04d4               
 547 04d4 02002021		move	$a0, $s0
 548 04d8 0C000230		jal	populate_dijkstra_arrays
 549 04dc               	
 550 04dc 20080004		addi	$t0, $zero, 4		# 4 bytes
 551 04e0 01110018		mul	$t0, $t0, $s1		# 4 bytes * source index
     04e4 00004012
 552 04e8 3C090000		la	$t1, dist	
     04ec 35290000
 553 04f0 01284820		add	$t1, $t1, $t0	
 554 04f4 AD200000		sw	$zero, 0($t1)		# store 0 at dist[S]
 555 04f8               
 556 04f8 00009020		add	$s2, $zero, $zero	# v
 557 04fc               	
 558 04fc               for_find_short_path:
 559 04fc 12500010		beq	$s2, $s0, find_short_path_done
 560 0500               
 561 0500 02002021		move	$a0, $s0
 562 0504 0C000252		jal	min_distance
 563 0508 0040A021		move	$s4, $v0		# u in s4
 564 050c               
 565 050c 3C080000		la	$t0, sptSet
     0510 35080000
 566 0514 20090004		addi	$t1, $zero, 4
 567 0518 01340018		mul	$t1, $t1, $s4		# bytes past sptSet for u
     051c 00004812
 568 0520 200A0001		addi	$t2, $zero, 1
 569 0524 01094020		add	$t0, $t0, $t1
 570 0528 AD0A0000		sw	$t2, 0($t0)		# put 1 in sptSet[u]
 571 052c               
 572 052c 02002021		move	$a0, $s0		# give V
 573 0530 02802821		move	$a1, $s4		# give u
 574 0534 0C00015C		jal	adjacent_verticies
 575 0538               
 576 0538 22520001		addi	$s2, $s2, 1
 577 053c 0800013F		j	for_find_short_path
 578 0540               find_short_path_done:
 579 0540 20080005		addi	$t0, $zero, 5
 580 0544               
 581 0544 8FB70020		lw	$s7, 32($sp)
 582 0548 8FB6001C	        lw      $s6, 28($sp)
 583 054c 8FB50018	        lw      $s5, 24($sp)
 584 0550 8FB40014	        lw      $s4, 20($sp)
 585 0554 8FB30010	        lw      $s3, 16($sp)
 586 0558 8FB2000C	        lw      $s2, 12($sp)
 587 055c 8FB10008	        lw      $s1, 8($sp)
 588 0560 8FB00004	        lw      $s0, 4($sp)
 589 0564 8FBF0000	        lw      $ra, 0($sp)
 590 0568 23BD0024	        addi    $sp, $sp, 36
 591 056c 03E00008	        jr      $ra
 592 0570               
 593 0570               #
 594 0570               # Name:         adjacent_verticies
 595 0570               # Description:  populates the dist and path grids from dijkstra's algorithm
 596 0570               # Arguments:    a0:     total number of nodes, V
 597 0570               #               a1:     current minimun index, u
 598 0570               # Returns:      none
 599 0570               # Destroys:     $t0 - $t7
 600 0570               #
 601 0570               adjacent_verticies:
 602 0570 23BDFFDC	        addi    $sp, $sp, -36   # $sp = $sp + 36
 603 0574 AFBF0000	        sw      $ra, 0($sp)
 604 0578 AFB00004	        sw      $s0, 4($sp)
 605 057c AFB10008	        sw      $s1, 8($sp)
 606 0580 AFB2000C	        sw      $s2, 12($sp)
 607 0584 AFB30010	        sw      $s3, 16($sp)
 608 0588 AFB40014	        sw      $s4, 20($sp)
 609 058c AFB50018	        sw      $s5, 24($sp)
 610 0590 AFB6001C	        sw      $s6, 28($sp)
 611 0594 AFB70020	        sw      $s7, 32($sp)
 612 0598               
 613 0598 00808021		move	$s0, $a0		# store V 
 614 059c 00A08821		move	$s1, $a1		# store u
 615 05a0 3C120000		la	$s2, sptSet
     05a4 36520000
 616 05a8 3C170000		la	$s7, path
     05ac 36F70000
 617 05b0               
 618 05b0 00004020		add	$t0, $zero, $zero
 619 05b4               adj_V_loop:
 620 05b4 11100033		beq	$t0, $s0, adj_V_done
 621 05b8               
 622 05b8 8E490000		lw	$t1, 0($s2)		# sptSet[v]
 623 05bc 1520002E		bne	$t1, $zero, break_adj_V # sptSet[v] == 0
 624 05c0               
 625 05c0 02300018		mul	$t1, $s1, $s0		# u * m
     05c4 00004812
 626 05c8 01284820		add	$t1, $t1, $t0		# u * m + v <-- this is our pos in grid
 627 05cc               
 628 05cc 3C130000		la	$s3, grid		# load grid	
     05d0 36730000
 629 05d4 200A0004		addi	$t2, $zero, 4
 630 05d8 012A0018		mul	$t1, $t1, $t2		# byte position for grid [u][v]
     05dc 00004812
 631 05e0               				
 632 05e0 02699820		add	$s3, $s3, $t1
 633 05e4 8E690000		lw	$t1, 0($s3)		# get element at grid[u][v]
 634 05e8 11200023		beq	$t1, $zero, break_adj_V	# if grid[u][v] != 0
 635 05ec               	
 636 05ec 200A0004		addi	$t2, $zero, 4
 637 05f0 01510018		mul	$t2, $t2, $s1		# byte position for dist[u]
     05f4 00005012
 638 05f8 3C0B0000		la	$t3, dist
     05fc 356B0000
 639 0600 016A5820		add	$t3, $t3, $t2
 640 0604 8D6A0000		lw	$t2, 0($t3)		# dist[u] value
 641 0608               
 642 0608 3C017FFF		addi	$t3, $zero, INFINITY	# infinity value
     060c 3421FFFE
     0610 00015820
 643 0614 114B0018		beq	$t2, $t3, break_adj_V	# dist[u] != infinity
 644 0618               	
 645 0618 200B0004		addi	$t3, $zero, 4
 646 061c 01680018		mul	$t3, $t3, $t0		# byte position for dist[v]
     0620 00005812
 647 0624 3C0C0000		la	$t4, dist
     0628 358C0000
 648 062c 018B6020		add	$t4, $t4, $t3		
 649 0630 8D8C0000		lw	$t4, 0($t4)		# dist[v]
 650 0634               
 651 0634 01496820		add	$t5, $t2, $t1		# dist[u] + grid[u][v]
 652 0638               	
 653 0638 01AC702A		slt	$t6, $t5, $t4		# dist[u] + grid[u][v] < dist[v]
 654 063c 11C0000E		beq	$t6, $zero, break_adj_V
 655 0640               
 656 0640 200A0004		addi	$t2, $zero, 4
 657 0644 01480018		mul	$t2, $t2, $t0		# dist[v] bytes
     0648 00005012
 658 064c 3C0B0000		la	$t3, dist
     0650 356B0000
 659 0654 016A5820		add	$t3, $t3, $t2		# dist[v] position
 660 0658 AD6D0000		sw	$t5, 0($t3)
 661 065c               
 662 065c 200A0004		addi	$t2, $zero, 4
 663 0660 01480018		mul	$t2, $t2, $t0		# path[v] bytes
     0664 00005012
 664 0668 3C0D0000		la	$t5, path
     066c 35AD0000
 665 0670 01AA6820		add	$t5, $t5, $t2		# path[v]
 666 0674 ADB10000		sw	$s1, 0($t5)		# store path[v]
 667 0678               
 668 0678               break_adj_V:
 669 0678 21080001		addi	$t0, $t0, 1
 670 067c 22520004		addi	$s2, $s2, 4
 671 0680 0800016D		j	adj_V_loop
 672 0684               adj_V_done:
 673 0684 8FB70020	        lw      $s7, 32($sp)
 674 0688 8FB6001C	        lw      $s6, 28($sp)
 675 068c 8FB50018	        lw      $s5, 24($sp)
 676 0690 8FB40014	        lw      $s4, 20($sp)
 677 0694 8FB30010	        lw      $s3, 16($sp)
 678 0698 8FB2000C	        lw      $s2, 12($sp)
 679 069c 8FB10008	        lw      $s1, 8($sp)
 680 06a0 8FB00004	        lw      $s0, 4($sp)
 681 06a4 8FBF0000	        lw      $ra, 0($sp)
 682 06a8 23BD0024	        addi    $sp, $sp, 36
 683 06ac 03E00008	        jr      $ra
 684 06b0               #
 685 06b0               # Name:         print_nodes
 686 06b0               # Description:  prints the second half of STDOUT with each node, its path,
 687 06b0               #			and its weight
 688 06b0               # Arguments:    a0:     total number of nodes, n
 689 06b0               #               a1:     source node, S
 690 06b0               # Returns:      none
 691 06b0               # Destroys:     $t0 - $t7
 692 06b0               #
 693 06b0               print_nodes:
 694 06b0 23BDFFDC	        addi    $sp, $sp, -36   # $sp = $sp + 36
 695 06b4 AFBF0000	        sw      $ra, 0($sp)
 696 06b8 AFB00004	        sw      $s0, 4($sp)
 697 06bc AFB10008	        sw      $s1, 8($sp)
 698 06c0 AFB2000C	        sw      $s2, 12($sp)
 699 06c4 AFB30010	        sw      $s3, 16($sp)
 700 06c8 AFB40014	        sw      $s4, 20($sp)
 701 06cc AFB50018	        sw      $s5, 24($sp)
 702 06d0 AFB6001C	        sw      $s6, 28($sp)
 703 06d4 AFB70020	        sw      $s7, 32($sp)
 704 06d8                     	
 705 06d8 00808021		move	$s0, $a0		# store n
 706 06dc 00A08821		move	$s1, $a1		# store origin
 707 06e0               
 708 06e0 34020004		li	$v0, PRINT_STRING
 709 06e4 3C040000		la	$a0, newline
     06e8 34840000
 710 06ec 0000000C		syscall	
 711 06f0               
 712 06f0 34020004		li	$v0, PRINT_STRING	# print top of nodes board
 713 06f4 3C040000		la	$a0, board_dijkstra_top
     06f8 34840000
 714 06fc 0000000C		syscall
 715 0700               	        
 716 0700 00009020		add	$s2, $zero, $zero
 717 0704               pn_loop:
 718 0704 12500031		beq	$s2, $s0, pn_loop_done
 719 0708               
 720 0708 34020001		li	$v0, PRINT_INT
 721 070c 02402021		move	$a0, $s2
 722 0710 0000000C		syscall
 723 0714               
 724 0714 2A53000A		slti	$s3, $s2, 10
 725 0718 12600005		beq	$s3, $zero, node_ge_ten
 726 071c               
 727 071c 34020004		li	$v0, PRINT_STRING
 728 0720 3C040000		la	$a0, board_space_7
     0724 34840000
 729 0728 0000000C		syscall
 730 072c 080001D0		j	pn_loop_cont
 731 0730               node_ge_ten:				# for if node is >= 10
 732 0730 34020004		li	$v0, PRINT_STRING
 733 0734 3C040000		la	$a0, board_space_6
     0738 34840000
 734 073c 0000000C		syscall
 735 0740               pn_loop_cont:
 736 0740               	
 737 0740 00001020		add	$v0, $zero, $zero
 738 0744 02402021		move	$a0, $s2
 739 0748 02202821		move	$a1, $s1
 740 074c 0C000202		jal	print_path
 741 0750               
 742 0750 2008FFFF		addi	$t0, $zero, -1
 743 0754 11020017		beq	$t0, $v0, pn_unreachable	# if v0 is -1 the path is
 744 0758               						# unreachable.
 745 0758               
 746 0758 34020004		li	$v0, PRINT_STRING
 747 075c 3C040000		la	$a0, colon
     0760 34840000
 748 0764 0000000C		syscall
 749 0768               
 750 0768 34020004		li	$v0, PRINT_STRING
 751 076c 3C040000		la	$a0, board_space_1
     0770 34840000
 752 0774 0000000C		syscall
 753 0778               	
 754 0778 3C080000		la	$t0, dist
     077c 35080000
 755 0780 20090004		addi	$t1, $zero, 4
 756 0784 01320018		mul	$t1, $t1, $s2
     0788 00004812
 757 078c 01094020		add	$t0, $t0, $t1
 758 0790 8D080000		lw	$t0, 0($t0)
 759 0794               
 760 0794 34020001		li	$v0, PRINT_INT			# prints the weight to this node
 761 0798 01002021		move	$a0, $t0
 762 079c 0000000C		syscall
 763 07a0               	
 764 07a0 34020004		li	$v0, PRINT_STRING
 765 07a4 3C040000		la	$a0, newline
     07a8 34840000
 766 07ac 0000000C		syscall
 767 07b0               
 768 07b0 080001F1		j	reachable
 769 07b4               pn_unreachable:					# unreachable case
 770 07b4 34020004		li	$v0, PRINT_STRING
 771 07b8 3C040000		la	$a0, unreachable
     07bc 34840000
 772 07c0 0000000C		syscall
 773 07c4               
 774 07c4               reachable:					# continue
 775 07c4 22520001		addi	$s2, $s2, 1
 776 07c8 080001C1		j	pn_loop
 777 07cc               pn_loop_done:					# newline for bottom of screen
 778 07cc 34020004		li	$v0, PRINT_STRING
 779 07d0 3C040000		la	$a0, newline
     07d4 34840000
 780 07d8 0000000C		syscall
 781 07dc               
 782 07dc 8FB70020		lw	$s7, 32($sp)
 783 07e0 8FB6001C		lw      $s6, 28($sp)
 784 07e4 8FB50018	        lw      $s5, 24($sp)
 785 07e8 8FB40014	        lw      $s4, 20($sp)
 786 07ec 8FB30010	        lw      $s3, 16($sp)
 787 07f0 8FB2000C	        lw      $s2, 12($sp)
 788 07f4 8FB10008	        lw      $s1, 8($sp)
 789 07f8 8FB00004	        lw      $s0, 4($sp)
 790 07fc 8FBF0000	        lw      $ra, 0($sp)
 791 0800 23BD0024	        addi    $sp, $sp, 36
 792 0804 03E00008	        jr      $ra
 793 0808               
 794 0808               #
 795 0808               # Name:         print_path
 796 0808               # Description:  recursive function to print the path from our destination to
 797 0808               #			our source node.
 798 0808               # Arguments:    a0:     destination node, j
 799 0808               #               a1:     source node, S
 800 0808               # Returns:      $v0:	will contain -1 if the path is unreachable
 801 0808               # Destroys:     $t0 - $t7
 802 0808               #
 803 0808               print_path:
 804 0808 23BDFFDC	        addi    $sp, $sp, -36   # $sp = $sp + 36
 805 080c AFBF0000	        sw      $ra, 0($sp)
 806 0810 AFB00004	        sw      $s0, 4($sp)
 807 0814 AFB10008	        sw      $s1, 8($sp)
 808 0818 AFB2000C	        sw      $s2, 12($sp)
 809 081c AFB30010	        sw      $s3, 16($sp)
 810 0820 AFB40014	        sw      $s4, 20($sp)
 811 0824 AFB50018	        sw      $s5, 24($sp)
 812 0828 AFB6001C	        sw      $s6, 28($sp)
 813 082c AFB70020	        sw      $s7, 32($sp)
 814 0830               
 815 0830 00808021		move	$s0, $a0
 816 0834 00A08821		move	$s1, $a1
 817 0838               
 818 0838 12110014		beq	$s0, $s1, dst_is_src
 819 083c               
 820 083c 3C120000		la	$s2, path
     0840 36520000
 821 0844 20130004		addi	$s3, $zero, 4
 822 0848 02700018		mul	$s3, $s3, $s0		# path[j] bytes
     084c 00009812
 823 0850               
 824 0850 02539020		add	$s2, $s2, $s3
 825 0854 8E530000		lw	$s3, 0($s2)		# path[j]
 826 0858               
 827 0858 2008FFFF		addi	$t0, $zero, -1
 828 085c 1268000C		beq	$s3, $t0, pp_unreachable
 829 0860               
 830 0860 34020001		li	$v0, PRINT_INT
 831 0864 02602021		move	$a0, $s3
 832 0868 0000000C		syscall
 833 086c               
 834 086c 34020004		li	$v0, PRINT_STRING
 835 0870 3C040000		la	$a0, board_space_1
     0874 34840000
 836 0878 0000000C		syscall
 837 087c               
 838 087c 02602021		move	$a0, $s3
 839 0880 02202821		move	$a1, $s1
 840 0884 20420001		addi	$v0, $v0, 1
 841 0888 0C000202		jal	print_path
 842 088c               dst_is_src:
 843 088c 08000225		j	pp_cont
 844 0890               pp_unreachable:
 845 0890 2002FFFF		addi	$v0, $zero, -1
 846 0894               pp_cont:
 847 0894 8FB70020	        lw      $s7, 32($sp)
 848 0898 8FB6001C	        lw      $s6, 28($sp)
 849 089c 8FB50018	        lw      $s5, 24($sp)
 850 08a0 8FB40014	        lw      $s4, 20($sp)
 851 08a4 8FB30010	        lw      $s3, 16($sp)
 852 08a8 8FB2000C	        lw      $s2, 12($sp)
 853 08ac 8FB10008	        lw      $s1, 8($sp)
 854 08b0 8FB00004	        lw      $s0, 4($sp)
 855 08b4 8FBF0000	        lw      $ra, 0($sp)
 856 08b8 23BD0024	        addi    $sp, $sp, 36
 857 08bc 03E00008	        jr      $ra
 858 08c0               
 859 08c0               #
 860 08c0               # Name:         populate_dijkstra_arrays
 861 08c0               # Description:  populates sptSet with 0's, dist with INFINITY, and path with -1
 862 08c0               # Arguments:    a0:     total number of nodes, V
 863 08c0               # Returns:      none
 864 08c0               # Destroys:     $t0 - $t7
 865 08c0               #
 866 08c0               populate_dijkstra_arrays:
 867 08c0 23BDFFEC		addi	$sp, $sp, -20
 868 08c4 AFBF0000		sw	$ra, 0($sp)
 869 08c8 AFB00004		sw	$s0, 4($sp)
 870 08cc AFB10008		sw	$s1, 8($sp)
 871 08d0 AFB2000C		sw	$s2, 12($sp)
 872 08d4 AFB30010		sw	$s3, 16($sp)
 873 08d8               
 874 08d8 00808021		move	$s0, $a0
 875 08dc 3C110000		la	$s1, dist
     08e0 36310000
 876 08e4 3C120000		la	$s2, sptSet
     08e8 36520000
 877 08ec 3C130000		la	$s3, path	
     08f0 36730000
 878 08f4               
 879 08f4 00004020		add	$t0, $zero, $zero
 880 08f8               populate:
 881 08f8 1110000C		beq	$t0, $s0, populate_done
 882 08fc               
 883 08fc 3C017FFF		addi	$t1, $zero, INFINITY
     0900 3421FFFE
     0904 00014820
 884 0908 AE290000		sw	$t1, 0($s1)
 885 090c AE400000		sw	$zero, 0($s2)
 886 0910 2009FFFF		addi	$t1, $zero, -1
 887 0914 AE690000		sw	$t1, 0($s3)		# path[0] == -1
 888 0918               
 889 0918 21080001		addi	$t0, $t0, 1
 890 091c 22310004		addi	$s1, $s1, 4
 891 0920 22520004		addi	$s2, $s2, 4
 892 0924 22730004		addi	$s3, $s3, 4
 893 0928 0800023E		j	populate
 894 092c               populate_done:
 895 092c 8FB30010		lw	$s3, 16($sp)
 896 0930 8FB2000C		lw	$s2, 12($sp)
 897 0934 8FB10008		lw	$s1, 8($sp)
 898 0938 8FB00004		lw	$s0, 4($sp)
 899 093c 8FBF0000		lw	$ra, 0($sp)
 900 0940 23BD0014		addi	$sp, $sp, 20
 901 0944 03E00008		jr	$ra
 902 0948               
 903 0948               #
 904 0948               # Name:         min_distance
 905 0948               # Description:  finds the current minimum distance index
 906 0948               # Arguments:    a0:     total number of nodes, V
 907 0948               # Returns:      none
 908 0948               # Destroys:     $t0 - $t7
 909 0948               #
 910 0948               min_distance:
 911 0948 23BDFFDC	        addi    $sp, $sp, -36   # $sp = $sp + 36
 912 094c AFBF0000	        sw      $ra, 0($sp)
 913 0950 AFB00004	        sw      $s0, 4($sp)
 914 0954 AFB10008	        sw      $s1, 8($sp)
 915 0958 AFB2000C	        sw      $s2, 12($sp)
 916 095c AFB30010	        sw      $s3, 16($sp)
 917 0960 AFB40014	        sw      $s4, 20($sp)
 918 0964 AFB50018	        sw      $s5, 24($sp)
 919 0968 AFB6001C	        sw      $s6, 28($sp)
 920 096c AFB70020	        sw      $s7, 32($sp)
 921 0970               
 922 0970 00808021		move	$s0, $a0		# store V
 923 0974               
 924 0974 3C017FFF		addi	$t0, $zero, INFINITY	# curr distance
     0978 3421FFFE
     097c 00014020
 925 0980 2009FFFF		addi	$t1, $zero, -1		# curr index
 926 0984               
 927 0984 3C110000		la	$s1, sptSet
     0988 36310000
 928 098c 3C120000		la	$s2, dist
     0990 36520000
 929 0994               
 930 0994 00005020		add	$t2, $zero, $zero	# counter v
 931 0998               for_min_dist:
 932 0998 1150000B		beq	$t2, $s0, for_min_dist_done	# when v == V stop
 933 099c               
 934 099c 8E2B0000		lw	$t3, 0($s1)			# sptSet[v]
 935 09a0 15600005		bne	$t3, $zero, break_min		# sptSet[V] == 0
 936 09a4 8E4B0000		lw	$t3, 0($s2)			# dist[v]
 937 09a8 0168082A		bge	$t3, $t0, break_min		# branch if dist[v]  >= curr dist
     09ac 10200002
 938 09b0               
 939 09b0 000B4020		add	$t0, $zero, $t3			# min_dist = dist[v]
 940 09b4 000A4820		add	$t1, $zero, $t2			# min index = v
 941 09b8               break_min:
 942 09b8 22310004		addi	$s1, $s1, 4
 943 09bc 22520004		addi	$s2, $s2, 4
 944 09c0 214A0001		addi	$t2, $t2, 1
 945 09c4 08000266		j	for_min_dist
 946 09c8               for_min_dist_done:
 947 09c8 01201021		move	$v0, $t1
 948 09cc               
 949 09cc 8FB70020	        lw      $s7, 32($sp)
 950 09d0 8FB6001C	        lw      $s6, 28($sp)
 951 09d4 8FB50018	        lw      $s5, 24($sp)
 952 09d8 8FB40014	        lw      $s4, 20($sp)
 953 09dc 8FB30010	        lw      $s3, 16($sp)
 954 09e0 8FB2000C	        lw      $s2, 12($sp)
 955 09e4 8FB10008	        lw      $s1, 8($sp)
 956 09e8 8FB00004	        lw      $s0, 4($sp)
 957 09ec 8FBF0000	        lw      $ra, 0($sp)
 958 09f0 23BD0024	        addi    $sp, $sp, 36
 959 09f4 03E00008	        jr      $ra
 960 09f8               
 961 09f8               
 962 09f8               # ERROR PRINTING
 963 09f8               
 964 09f8               #
 965 09f8               # Name:         num_node_err
 966 09f8               # Description:  prints an error stating there is an invalid number of nodes
 967 09f8               #			and quits.
 968 09f8               # Arguments:    none
 969 09f8               # Returns:      none
 970 09f8               # Destroys:     none
 971 09f8               #
 972 09f8               num_node_err:
 973 09f8 34020004		li	$v0, PRINT_STRING
 974 09fc 3C040000		la	$a0, error1
     0a00 34840000
 975 0a04 0000000C		syscall
 976 0a08               
 977 0a08 3402000A		li	$v0, 10
 978 0a0c 0000000C		syscall
 979 0a10               
 980 0a10               #
 981 0a10               # Name:         num_edge_err
 982 0a10               # Description:  prints an error stating there is an invalid number of edges
 983 0a10               #                       and quits.
 984 0a10               # Arguments:    none
 985 0a10               # Returns:      none
 986 0a10               # Destroys:     none
 987 0a10               #
 988 0a10               num_edge_err:
 989 0a10 34020004		li	$v0, PRINT_STRING
 990 0a14 3C040000		la	$a0, error2
     0a18 34840000
 991 0a1c 0000000C		syscall
 992 0a20               
 993 0a20 3402000A		li	$v0, 10
 994 0a24 0000000C		syscall
 995 0a28               
 996 0a28               #
 997 0a28               # Name:         invl_src_err
 998 0a28               # Description:  prints an error stating the source is invalid
 999 0a28               # Arguments:    none
1000 0a28               # Returns:      none
1001 0a28               # Destroys:     none
1002 0a28               #
1003 0a28               invl_src_err:
1004 0a28 34020004		li	$v0, PRINT_STRING
1005 0a2c 3C040000		la	$a0, error3
     0a30 34840000
1006 0a34 0000000C		syscall
1007 0a38               
1008 0a38 3402000A		li	$v0, 10
1009 0a3c 0000000C		syscall
1010 0a40               
1011 0a40               #
1012 0a40               # Name:         invl_dst_err
1013 0a40               # Description:  prints an error stating the destination is invalid
1014 0a40               # Arguments:    none
1015 0a40               # Returns:      none
1016 0a40               # Destroys:     none
1017 0a40               #
1018 0a40               invl_dst_err:
1019 0a40 34020004		li	$v0, PRINT_STRING
1020 0a44 3C040000		la	$a0, error4
     0a48 34840000
1021 0a4c 0000000C		syscall
1022 0a50               	
1023 0a50 3402000A		li	$v0, 10
1024 0a54 0000000C		syscall
1025 0a58               
1026 0a58               #
1027 0a58               # Name:         invl_weight_err
1028 0a58               # Description:  prints an error stating the weight is invalid
1029 0a58               # Arguments:    none
1030 0a58               # Returns:      none
1031 0a58               # Destroys:     none
1032 0a58               #
1033 0a58               invl_weight_err:
1034 0a58 34020004		li	$v0, PRINT_STRING
1035 0a5c 3C040000		la	$a0, error5
     0a60 34840000
1036 0a64 0000000C		syscall
1037 0a68               	
1038 0a68 3402000A		li	$v0, 10
1039 0a6c 0000000C		syscall
1040 0a70               
1041 0a70               #
1042 0a70               # Name:         invl_strt_err
1043 0a70               # Description:  prints an error stating the starting node is invalid
1044 0a70               # Arguments:    none
1045 0a70               # Returns:      none
1046 0a70               # Destroys:     none
1047 0a70               #
1048 0a70               invl_strt_err:
1049 0a70 34020004		li	$v0, PRINT_STRING
1050 0a74 3C040000		la	$a0, error6
     0a78 34840000
1051 0a7c 0000000C		syscall
1052 0a80               
1053 0a80 3402000A		li	$v0, 10
1054 0a84 0000000C		syscall


INFINITY                   = 7FFFFFFE   
PRINT_INT                  = 00000001   
PRINT_STRING               = 00000004   
READ_INT                   = 00000005   
adj_V_done                   00000684 R  text 
adj_V_loop                   000005B4 R  text 
adjacent_verticies           00000570 R  text 
board_dash                   000026FC R  data 
board_dijkstra_top           0000271B R  data 
board_space_1                000026FE R  data 
board_space_2                00002700 R  data 
board_space_3                00002703 R  data 
board_space_4                00002707 R  data 
board_space_6                0000270C R  data 
board_space_7                00002713 R  data 
break_adj_V                  00000678 R  text 
break_min                    000009B8 R  text 
colon                        0000281E R  data 
comma                        0000281B R  data 
data_is_zero                 00000350 R  text 
data_isnt_zero               00000360 R  text 
data_lt_hund                 0000036C R  text 
data_lt_ten                  0000032C R  text 
dijkstra                     000004A4 R  text 
dist                         00002580 R  data 
done_read_data               00000128 R  text 
dst_is_src                   0000088C R  text 
edge_ne                      000001FC R  text 
edges                        00000000 R  data 
error1                       00002734 R  data 
error2                       00002768 R  data 
error3                       0000279D R  data 
error4                       000027B7 R  data 
error5                       000027D6 R  data 
error6                       000027F0 R  data 
find_short_path_done         00000540 R  text 
for_find_short_path          000004FC R  text 
for_min_dist                 00000998 R  text 
for_min_dist_done            000009C8 R  text 
grid                         000012C0 R  data 
grid_data_cont               000002E8 R  text 
gt_ten                       00000444 R  text 
invl_dst_err                 00000A40 R  text 
invl_src_err                 00000A28 R  text 
invl_strt_err                00000A70 R  text 
invl_weight_err              00000A58 R  text 
main                         00000000 R  text 
min_distance                 00000948 R  text 
newline                      00002819 R  data 
nmsrc                        000026AC R  data 
node_ge_ten                  00000730 R  text 
num_edge_err                 00000A10 R  text 
num_node_err                 000009F8 R  text 
path                         00002648 R  data 
pn_loop                      00000704 R  text 
pn_loop_cont                 00000740 R  text 
pn_loop_done                 000007CC R  text 
pn_unreachable               000007B4 R  text 
populate                     000008F8 R  text 
populate_dijkstra_arrays     000008C0 R  text 
populate_done                0000092C R  text 
pp_cont                      00000894 R  text 
pp_unreachable               00000890 R  text 
print_grid                   0000024C R  text 
print_grid_data              000002A0 R  text 
print_grid_data_done         000003AC R  text 
print_grid_data_loop         000002EC R  text 
print_grid_data_loop_done    00000394 R  text 
print_nodes                  000006B0 R  text 
print_path                   00000808 R  text 
print_top_col_cont           00000460 R  text 
print_top_columns            00000418 R  text 
print_top_columns_done       00000468 R  text 
print_top_row                000003D8 R  text 
prompt1                      00002808 R  data 
reachable                    000007C4 R  text 
read_data                    000000C0 R  text 
read_nodes                   0000004C R  text 
search_done                  00000208 R  text 
search_edges                 000001D4 R  text 
setup_grid                   00000180 R  text 
setup_grid_loop_x            000001C4 R  text 
setup_grid_loop_x_done       00000218 R  text 
setup_grid_loop_y            000001BC R  text 
setup_grid_loop_y_done       00000220 R  text 
sptSet                       000025E4 R  data 
unreachable                  00002820 R  data 
y_gt_ten                     000002DC R  text 
